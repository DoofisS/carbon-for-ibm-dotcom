(window.webpackJsonp=window.webpackJsonp||[]).push([[465],{"../../node_modules/@storybook/addon-docs/blocks.js":function(e,n,t){"use strict";var o=t("../../node_modules/util-deprecate/browser.js"),s=t.n(o),r=t("../../node_modules/ts-dedent/esm/index.js"),a=t("../../node_modules/@storybook/addon-docs/dist/esm/blocks/index.js");t.d(n,"a",(function(){return a.Description})),t.d(n,"b",(function(){return a.Meta})),t.d(n,"c",(function(){return a.Props}));s()((()=>{}),r.a`
    Importing from '@storybook/addon-docs/blocks' is deprecated, import directly from '@storybook/addon-docs' instead:
    
    https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-scoped-blocks-imports
`)()},"../../node_modules/@storybook/addon-docs/dist/esm/index.js":function(e,n,t){"use strict";var o=t("../../node_modules/@storybook/addon-docs/dist/esm/blocks/index.js");t.d(n,"a",(function(){return o.AddContext}))},"./docs/contributing-to-web-components.stories.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"__page",(function(){return p}));t("../../node_modules/core-js/modules/es.object.keys.js"),t("../../node_modules/core-js/modules/es.array.index-of.js"),t("../../node_modules/core-js/modules/es.symbol.js"),t("../../node_modules/core-js/modules/es.object.assign.js"),t("../../node_modules/core-js/modules/es.function.bind.js"),t("../../node_modules/core-js/modules/es.object.define-property.js"),t("../../node_modules/core-js/modules/es.array.filter.js"),t("../../node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),t("../../node_modules/core-js/modules/es.array.for-each.js"),t("../../node_modules/core-js/modules/web.dom-collections.for-each.js"),t("../../node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),t("../../node_modules/core-js/modules/es.object.define-properties.js"),t("../../node_modules/react/index.js");var o=t("../../node_modules/@mdx-js/react/dist/esm.js"),s=t("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),r=t("../../node_modules/@storybook/addon-docs/blocks.js"),a=["components"];function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){d(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},l.apply(this,arguments)}function u(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var m={};function b(e){var n=e.components,t=u(e,a);return Object(o.b)("wrapper",l({},m,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)(r.b,{title:"Overview/Contributing to the Web Components package",mdxType:"Meta"}),Object(o.b)(r.a,{markdown:"\x3c!-- START doctoc generated TOC please keep comment here to allow auto update --\x3e\n\x3c!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --\x3e\n## Table of contents\n\n- [Contributing to Carbon for IBM.com Web Components package](#contributing-to-carbon-for-ibmcom-web-components-package)\n  - [Overview](#overview)\n  - [Get Started](#get-started)\n  - [Packages](#packages)\n  - [JSDoc](#jsdoc)\n  - [Stable Selectors](#stable-selectors)\n  - [Feature Flag](#feature-flag)\n  - [Environment Variables](#environment-variables)\n  - [Storybook](#storybook)\n  - [Unit Test Coverage](#unit-test-coverage)\n  - [Further Reading](#further-reading)\n\n\x3c!-- END doctoc generated TOC please keep comment here to allow auto update --\x3e\n\n# Contributing to Carbon for IBM.com Web Components package\n\n> Guidelines for how to make a code contribution to the Web Components package\n\n## Overview\n\nThank you for your contribution to Carbon for IBM.com! Below are guidelines on\nwhat some of the things we would be looking for as part of your contribution.\n\n## Get Started\n\n1. Fork this repository and clone it\n2. `yarn install`\n3. `yarn build`\n4. `cd packages/web-components`\n5. `yarn storybook`\n\n## Packages\n\nWe try to have any contributions to the library to live in their corresponding\npackage(s). The main packages to look out for when contributing a Web Component:\n\n- **Styles**: ([@carbon/ibmdotcom-styles](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/styles)) \nAll styles should live in the styles package in the monorepo. This way, the\nstyles can be shared with any other framework package (e.g. web components). \nIn addition, the way that web components utilize styles requires that there \nisn't a heavy amount of nesting happening in the `SCSS` code. \n- **Services**: ([@carbon/ibmdotcom-services](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/services))\nIf your component makes any API requests to a service that does not currently\nexist yet in our Services package, you can add in a new ES6 service class in\nthis package. If you need to test across multiple packages, you can make use of\n[yarn link](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/docs/developing.md#developing-locally).\nBe sure to properly export the class from the main `index.js`.\n- **Utilities**: ([@carbon/ibmdotcom-utilities](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/utilities))\nSimilar to ([Services](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/services)),\nany abstract utilities can be added to the Utilities package as an ES6 class or\nfunction. Be sure to properly export the class or function from the main \n`index.js`.\n\n## JSDoc\n\nIt is important that the component includes full documentation using `JSDoc`\nstandards. Our codebase uses `web-component-analyzer` to output the \n`custom-elements.json` for rendering the prop tables in our Storybook Docs for\neach component. When documenting, be sure to capture:\n\n- Element name and description\n- Documenting slots and attributes\n- Default values and allowed values\n\n## Stable Selectors\n\nEvery component must include [stable selectors](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/packages/web-components/docs/stable-selectors.md) \nas part of the overall markup, identifying any key elements that would be useful\nto have the ability to identify in a DOM search. At minimum, there should be at\nleast a container level stable selector defined, and all should use the `dds--`\nprefix identified from the utilities package. \n\nOur codebase provides a `StableSelectorMixin`, which is used for automatically\nsetting the `data-autoid` based on the custom element name for the wrapper \nelement:\n\n```javascript\n@customElement(`${ddsPrefix}-my-component`)\nclass DDSMyComponent extends StableSelectorMixin(LitElement) {\n  ...\n  render() {\n    return html`\n      <div></div>\n    `;\n  }\n\n  static styles = styles;\n} // => <dds-my-component data-autoid=\"dds--my-component\"></dds-my-component>\n```\n\n## Feature Flag\n\nIf this is a new component or enhancement, we would require that it is \nintroduced into Carbon for IBM.com behind a feature flag. \n\n[You can read full details on how to create and implement a feature flag here](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/packages/web-components/docs/feature-flags.md).\n\n## Environment Variables\n\nIf introducing any new environment variables (e.g. feature flags), be sure to \nalso update the `.env.example` file at the root of the Web Components package \nfolder. The example should include a good description of what the environment \nvariable does.\n\n## Storybook\n\nIn storybook, we are looking for the following criteria:\n\n- Blend of configurable knobs to multiple sub-stories that capture full\nfunctionality and features. When it makes sense, break down to multiple stories\nso that our automated visual regression tool ([Percy](https://percy.io)) can \nautomatically capture in its snapshot suite rather than creating multiple \nknobs.\n- Knob labels include the actual prop name in parenthesis\n- README (`README.stories.mdx`) with clear instructions for any Carbon for \nIBM.com user to get started right away. This would include:\n  * Which import(s) to include\n  * How to implement in a sample application (multiple examples if \n    necessary)\n  * Environment variable description and implementation details (if introducing \n    a new component)\n  * Prop table\n  * Stable Selectors table\n  * Contributing snippet (imported from root docs)\n\n## Unit Test Coverage\n\nOur team looks to include a minimum of 80% unit test coverage. One of the \nfeatures that we have included is automated snapshot testing, which will \nauto-generate snapshot tests based on existing storybook stories. \nWhile this gives automatic coverage right off the bat, additional unit tests\nmay be required to get over the 80% goal. All component level tests must live\nin the component folder under a sub-folder `__tests__`. The file name structure\nshould be `my-component.test.js`. Be sure to include any mock data (if necessary)\nin a `data` subfolder under `__tests__`. \n\nAll commands below should be run at `packages/web-components` directory.\n\nTo view a coverage report (and run the test suite), you can run:\n\n```bash\nyarn test:unit\n``` \n\nThis will generate a `coverage` folder under the package level `tests` folder \nwhich includes what the current coverage amount is, and which line(s) are \nmissing any coverage.\n\nTo update the snapshot file, run the following:\n\n```bash\nyarn test:unit:updateSnapshot\n```\n\nor the more directed command:\n\n```bash\ngulp test:unit --update-snapshot\n```\n\nTo run a specific test spec:\n\n```\n> gulp test:unit -s src/components/link-with-icon/__tests__/link-with-icon.test.ts\n```\n\nTo choose a specific browser (instead of Headless Chrome):\n\n```\n> gulp test:unit -b Firefox\n```\n\nYou can keep the browser after the test (and re-run the test when files change) by:\n\n```\n> gulp test:unit -b Chrome -k\n```\n\nTo disable the coverage instrumentation code from being generated:\n\n```\n> gulp test:unit -d\n```\n\nAbove options can be used together. This is useful to debug your code as you test:\n\n```\n> gulp test:unit -s src/components/link-with-icon/__tests__/link-with-icon.test.ts -b Chrome -d -k\n```\n\n## Further Reading\n\n- [Coding Conventions](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/packages/web-components/docs/coding-conventions.md)\n- [Submission Guidelines](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/docs/submission-guidelines.md)\n",mdxType:"Description"}))}b.isMDXComponent=!0;var p=function(){throw new Error("Docs-only story")};p.parameters={docsOnly:!0};var h={title:"Overview/Contributing to the Web Components package",includeStories:["__page"]},g={};h.parameters=h.parameters||{},h.parameters.docs=c(c({},h.parameters.docs||{}),{},{page:function(){return Object(o.b)(s.a,{mdxStoryNameToKey:g,mdxComponentAnnotations:h},Object(o.b)(b,null))}});n.default=h}}]);